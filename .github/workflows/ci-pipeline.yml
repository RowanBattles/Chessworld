name: Continuous Integration Pipeline

on:
  push:
    branches: [development, main]
  pull_request:

jobs:
  frontend:
    name: Frontend CI
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: Frontend
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Setup Node.js Environment
        uses: actions/setup-node@v3
        with:
          node-version: 20

      - name: Cache Dependencies
        uses: actions/cache@v3
        with:
          path: ~/.yarn/cache
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Install Dependencies
        run: yarn install

      - name: Run Linter
        run: yarn lint

  backend:
    name: Backend CI
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: Backend
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Install Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/v2.20.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose --version

      - name: Ensure Authservice .env directory exists
        working-directory: ${{ github.workspace }}
        run: mkdir -p Backend/Authservice/src/Authservice.API

      - name: Create .env for Authservice
        working-directory: ${{ github.workspace }}
        run: |
          cat <<EOF > Backend/Authservice/src/Authservice.API/.env
          EMAIL_SMTP_SERVER=${{ secrets.EMAIL_SMTP_SERVER }}
          EMAIL_SMTP_PORT=${{ secrets.EMAIL_SMTP_PORT }}
          EMAIL_SMTP_USER=${{ secrets.EMAIL_SMTP_USER }}
          EMAIL_SMTP_PASS=${{ secrets.EMAIL_SMTP_PASS }}
          EMAIL_FROM=${{ secrets.EMAIL_FROM }}
          EMAIL_VERIFICATION_BASE_URL=${{ secrets.EMAIL_VERIFICATION_BASE_URL }}
          JWT_SECRET=${{ secrets.JWT_SECRET }}
          EOF

      - name: Build Backend Services
        run: docker-compose -f docker-compose.yml build

      - name: Start Backend Services
        run: docker-compose -f docker-compose.yml up -d

      - name: Run Backend Tests
        run: docker-compose -f docker-compose.yml up --abort-on-container-exit --exit-code-from gameservice-tests

      - name: Install k6
        run: |
          curl -sLO https://github.com/grafana/k6/releases/download/v0.49.0/k6-v0.49.0-linux-amd64.tar.gz
          tar -xzf k6-v0.49.0-linux-amd64.tar.gz
          sudo mv k6-v0.49.0-linux-amd64/k6 /usr/local/bin/
          k6 version

      - name: Install node-fetch for validation
        run: |
          cd ../load_tests/validation
          npm install node-fetch

      - name: Run Load Tests
        run: |
          cd ../load_tests
          chmod +x test.sh
          ./test.sh | tee test_output.log
          grep -q "Test passed!" test_output.log

      - name: Tear Down Backend Services
        run: docker-compose -f docker-compose.yml down

  sonarcloud:
    name: SonarCloud Analysis
    runs-on: ubuntu-latest
    needs: [frontend, backend]
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Cache SonarCloud packages
        uses: actions/cache@v4
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Cache SonarCloud scanner
        id: cache-sonar-scanner
        uses: actions/cache@v4
        with:
          path: ./.sonar/scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner

      - name: Install SonarCloud scanner
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        shell: pwsh
        run: |
          New-Item -Path ./.sonar/scanner -ItemType Directory -Force
          dotnet tool update dotnet-sonarscanner --tool-path ./.sonar/scanner

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@v2
        with:
          args: >
            -Dsonar.projectKey=RowanBattles_Chessworld
            -Dsonar.organization=rowanbattles
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Check SonarCloud Quality Gate for branch
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          set -e
          projectKey="RowanBattles_Chessworld"
          branch="development"
          retries=30
          qualityGateStatus="NONE"
          while [[ "$qualityGateStatus" == "NONE" && $retries -gt 0 ]]; do
            sleep 5
            echo "Polling SonarCloud for Quality Gate status... ($((30 - retries + 1)))"
            qualityGateStatus=$(curl -s -u $SONAR_TOKEN: "https://sonarcloud.io/api/qualitygates/project_status?projectKey=$projectKey&branch=$branch" | jq -r .projectStatus.status)
            retries=$((retries - 1))
          done
          if [[ "$qualityGateStatus" != "OK" ]]; then
            echo "Quality Gate failed: $qualityGateStatus"
            exit 1
          fi
          echo "Quality Gate passed!"

  docker:
    name: Docker Build & Push
    runs-on: ubuntu-latest
    needs: sonarcloud
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Build and Push Frontend Image
        run: |
          docker build -t yourdockerhub/frontend:latest ./Frontend
          docker push yourdockerhub/frontend:latest

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}

      - name: Build and Push Frontend Docker Image
        run: |
          docker build --build-arg VITE_API_URL=https://chessworldexampledns.duckdns.org/api -t ${{ secrets.DOCKERHUB_USERNAME }}/frontend:latest .
          echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/frontend:latest

      - name: Tag and Push Backend Images
        run: |
          docker tag gameservice ${{ secrets.DOCKERHUB_USERNAME }}/gameservice:latest
          docker tag matchmakingservice ${{ secrets.DOCKERHUB_USERNAME }}/matchmakingservice:latest
          docker tag apigateway ${{ secrets.DOCKERHUB_USERNAME }}/apigateway:latest
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/gameservice:latest
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/matchmakingservice:latest
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/apigateway:latest
