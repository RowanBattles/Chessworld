name: Continuous Integration Pipeline

on:
  push:
    branches: [development, main]
  pull_request:

jobs:
  frontend:
    name: Frontend CI
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install Dependencies
        working-directory: ./Frontend
        run: npm ci

      - name: Run Frontend Tests
        working-directory: ./Frontend
        run: npm test -- --ci --coverage

      - name: Build Frontend
        working-directory: ./Frontend
        run: npm run build

      - name: Upload Frontend Coverage
        uses: actions/upload-artifact@v4
        with:
          name: frontend-coverage
          path: ./Frontend/coverage

  backend:
    name: Backend CI
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: "8.0.x"

      - name: Install Dependencies
        working-directory: ./Backend
        run: dotnet restore

      - name: Build Backend
        working-directory: ./Backend
        run: dotnet build --no-restore --configuration Release

      - name: Run Backend Tests with Coverage
        working-directory: ./Backend
        run: dotnet test --no-build --configuration Release --collect:"XPlat Code Coverage"

      - name: Upload Backend Coverage
        uses: actions/upload-artifact@v4
        with:
          name: backend-coverage
          path: ./Backend/**/TestResults

  sonarcloud:
    name: SonarCloud Analysis
    runs-on: ubuntu-latest
    needs: [frontend, backend]
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Download Frontend Coverage
        uses: actions/download-artifact@v4
        with:
          name: frontend-coverage
          path: ./Frontend/coverage

      - name: Download Backend Coverage
        uses: actions/download-artifact@v4
        with:
          name: backend-coverage
          path: ./Backend/TestResults

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@v2
        with:
          args: >
            -Dsonar.projectKey=RowanBattles_Chessworld
            -Dsonar.organization=rowanbattles
            -Dsonar.javascript.lcov.reportPaths=Frontend/coverage/lcov.info
            -Dsonar.cs.vscoveragexml.reportsPaths=Backend/**/TestResults/**/*.xml
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Check SonarCloud Quality Gate for branch
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          set -e
          projectKey="RowanBattles_Chessworld"
          branch="${GITHUB_REF##*/}"
          retries=30
          qualityGateStatus="NONE"
          while [[ "$qualityGateStatus" == "NONE" && $retries -gt 0 ]]; do
            sleep 5
            echo "Polling SonarCloud for Quality Gate status... ($((30 - retries + 1)))"
            response=$(curl -s -u $SONAR_TOKEN: "https://sonarcloud.io/api/qualitygates/project_status?projectKey=$projectKey&branch=$branch")
            qualityGateStatus=$(echo "$response" | jq -r .projectStatus.status)
            retries=$((retries - 1))
          done
          if [[ "$qualityGateStatus" != "OK" ]]; then
            echo "Quality Gate failed: $qualityGateStatus"
            echo "Failed conditions:"
            echo "$response" | jq -r '.projectStatus.conditions[] | select(.status != "OK") | "- \(.metricKey): \(.status) (\(.actualValue) vs \(.errorThreshold))"'
            exit 1
          fi
          echo "Quality Gate passed!"

  docker:
    name: Docker Build & Push
    runs-on: ubuntu-latest
    needs: sonarcloud
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and Push Frontend Image
        run: |
          docker build -t yourdockerhub/frontend:latest ./Frontend
          docker push yourdockerhub/frontend:latest

      - name: Build and Push Backend Image
        run: |
          docker build -t yourdockerhub/backend:latest ./Backend
          docker push yourdockerhub/backend:latest
